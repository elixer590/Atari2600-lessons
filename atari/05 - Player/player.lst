------- FILE player.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE player.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.07, 19/January/2020
      3  0000 ????
      4  0000 ????	       00 6b	   VERSION_MACRO =	107
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE player.asm
      5  0000 ????
      6  10000 ????				       seg	code
      7  f000					      org	$F000
      8  f000
      9  f000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  f000							;; Clean memory to start
     11  f000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12  f000				   START
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     14  f00b
     15  f00b		       a2 80		      ldx	#$80
     16  f00d		       86 09		      stx	COLUBK
     17  f00f
     18  f00f		       a9 0f		      lda	#%1111	; white playfield color
     19  f011		       85 08		      sta	COLUPF
     20  f013
     21  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     22  f013							;; Set the TIA Registers for player colors for P0 (player 1) and p1 (player 2)
     23  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     24  f013		       a9 48		      lda	#$48	; player 0 color - light red
     25  f015		       85 06		      sta	COLUP0	; P0 color register
     26  f017
     27  f017		       a9 c6		      lda	#$C6	; Player 2 color light green
     28  f019		       85 07		      sta	COLUP1
     29  f01b
     30  f01b		       a0 02		      ldy	#%00000010	; ctrlpf d1 set to 1 means pl is for score
     31  f01d		       84 0a		      sty	CTRLPF
     32  f01f
     33  f01f
     34  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f01f							;; Start new frame by turning on vblank and vsync
     36  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37  f01f				   NEW_FRAME
     38  f01f		       a9 02		      lda	#%00000010	; load 2 into A. Binary format for visualization of active bits
     39  f021		       85 01		      sta	VBLANK	; store 2 into VBLANK (enable vblank)
     40  f023		       85 00		      sta	VSYNC	; Store 2 into VSYNC (enable vsync)
     41  f025
     42  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f025							;; Generate 3 scanlines of vsync
     44  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  f025					      REPEAT	3	; do the following 3 times
     46  f025		       85 02		      sta	WSYNC	; storing anyvalue to the WSYNC address waits for next scanline
     45  f025					      REPEND		; end repeat
     46  f027		       85 02		      sta	WSYNC	; storing anyvalue to the WSYNC address waits for next scanline
     45  f027					      REPEND		; end repeat
     46  f029		       85 02		      sta	WSYNC	; storing anyvalue to the WSYNC address waits for next scanline
     47  f02b					      REPEND		; end repeat
     48  f02b
     49  f02b		       a9 00		      lda	#0
     50  f02d		       85 00		      sta	VSYNC	; disable VSYNC
     51  f02f
     52  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  f02f							;; Let the TIA output the recommended 37 blank scanlines
     54  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     55  f02f		       a2 25		      ldx	#37	; load decimal 37 into X
     56  f031				   LOOP_VBLANK
     57  f031		       85 02		      sta	WSYNC	; wait for next scanline
     58  f033		       ca		      dex		; decrement X
     59  f034		       d0 fb		      bne	LOOP_VBLANK	; Loop if more lines left
     60  f036
     61  f036		       a9 00		      lda	#0
     62  f038		       85 01		      sta	VBLANK
     63  f03a
     64  f03a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     65  f03a							;; Draw 192 visible scanlines (kernel)
     66  f03a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     67  f03a
     68  f03a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f03a							;; skip 10 scanlines
     70  f03a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f03a				   VisibleScanlines
     72  f03a					      REPEAT	10
     73  f03a		       85 02		      sta	WSYNC
     72  f03a					      REPEND
     73  f03c		       85 02		      sta	WSYNC
     72  f03c					      REPEND
     73  f03e		       85 02		      sta	WSYNC
     72  f03e					      REPEND
     73  f040		       85 02		      sta	WSYNC
     72  f040					      REPEND
     73  f042		       85 02		      sta	WSYNC
     72  f042					      REPEND
     73  f044		       85 02		      sta	WSYNC
     72  f044					      REPEND
     73  f046		       85 02		      sta	WSYNC
     72  f046					      REPEND
     73  f048		       85 02		      sta	WSYNC
     72  f048					      REPEND
     73  f04a		       85 02		      sta	WSYNC
     72  f04a					      REPEND
     73  f04c		       85 02		      sta	WSYNC
     74  f04e					      REPEND
     75  f04e
     76  f04e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     77  f04e							;; Display 10 scanlines for the scoreboard number
     78  f04e							;; Pull data from number bitmap
     79  f04e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f04e		       a0 00		      ldy	#0
     81  f050				   LOOP_SCORE
     82  f050		       b9 f2 ff 	      lda	numBitmap,Y	; get current line from number bitmap
     83  f053		       85 0e		      sta	PF1	; store in playfield (draw this to screen)
     84  f055		       85 02		      sta	WSYNC	; wait for next scanline
     85  f057		       c8		      iny		; increment index
     86  f058		       c0 0a		      cpy	#10	; compare index to 10
     87  f05a		       d0 f4		      bne	LOOP_SCORE	; loop if not 10
     88  f05c
     89  f05c		       a9 00		      lda	#0
     90  f05e		       85 0e		      sta	PF1	; clear playfield1
     91  f060
     92  f060							; Draw 50 scanlines between score and players
     93  f060					      REPEAT	50
     94  f060		       85 02		      sta	WSYNC
     93  f060					      REPEND
     94  f062		       85 02		      sta	WSYNC
     93  f062					      REPEND
     94  f064		       85 02		      sta	WSYNC
     93  f064					      REPEND
     94  f066		       85 02		      sta	WSYNC
     93  f066					      REPEND
     94  f068		       85 02		      sta	WSYNC
     93  f068					      REPEND
     94  f06a		       85 02		      sta	WSYNC
     93  f06a					      REPEND
     94  f06c		       85 02		      sta	WSYNC
     93  f06c					      REPEND
     94  f06e		       85 02		      sta	WSYNC
     93  f06e					      REPEND
     94  f070		       85 02		      sta	WSYNC
     93  f070					      REPEND
     94  f072		       85 02		      sta	WSYNC
     93  f072					      REPEND
     94  f074		       85 02		      sta	WSYNC
     93  f074					      REPEND
     94  f076		       85 02		      sta	WSYNC
     93  f076					      REPEND
     94  f078		       85 02		      sta	WSYNC
     93  f078					      REPEND
     94  f07a		       85 02		      sta	WSYNC
     93  f07a					      REPEND
     94  f07c		       85 02		      sta	WSYNC
     93  f07c					      REPEND
     94  f07e		       85 02		      sta	WSYNC
     93  f07e					      REPEND
     94  f080		       85 02		      sta	WSYNC
     93  f080					      REPEND
     94  f082		       85 02		      sta	WSYNC
     93  f082					      REPEND
     94  f084		       85 02		      sta	WSYNC
     93  f084					      REPEND
     94  f086		       85 02		      sta	WSYNC
     93  f086					      REPEND
     94  f088		       85 02		      sta	WSYNC
     93  f088					      REPEND
     94  f08a		       85 02		      sta	WSYNC
     93  f08a					      REPEND
     94  f08c		       85 02		      sta	WSYNC
     93  f08c					      REPEND
     94  f08e		       85 02		      sta	WSYNC
     93  f08e					      REPEND
     94  f090		       85 02		      sta	WSYNC
     93  f090					      REPEND
     94  f092		       85 02		      sta	WSYNC
     93  f092					      REPEND
     94  f094		       85 02		      sta	WSYNC
     93  f094					      REPEND
     94  f096		       85 02		      sta	WSYNC
     93  f096					      REPEND
     94  f098		       85 02		      sta	WSYNC
     93  f098					      REPEND
     94  f09a		       85 02		      sta	WSYNC
     93  f09a					      REPEND
     94  f09c		       85 02		      sta	WSYNC
     93  f09c					      REPEND
     94  f09e		       85 02		      sta	WSYNC
     93  f09e					      REPEND
     94  f0a0		       85 02		      sta	WSYNC
     93  f0a0					      REPEND
     94  f0a2		       85 02		      sta	WSYNC
     93  f0a2					      REPEND
     94  f0a4		       85 02		      sta	WSYNC
     93  f0a4					      REPEND
     94  f0a6		       85 02		      sta	WSYNC
     93  f0a6					      REPEND
     94  f0a8		       85 02		      sta	WSYNC
     93  f0a8					      REPEND
     94  f0aa		       85 02		      sta	WSYNC
     93  f0aa					      REPEND
     94  f0ac		       85 02		      sta	WSYNC
     93  f0ac					      REPEND
     94  f0ae		       85 02		      sta	WSYNC
     93  f0ae					      REPEND
     94  f0b0		       85 02		      sta	WSYNC
     93  f0b0					      REPEND
     94  f0b2		       85 02		      sta	WSYNC
     93  f0b2					      REPEND
     94  f0b4		       85 02		      sta	WSYNC
     93  f0b4					      REPEND
     94  f0b6		       85 02		      sta	WSYNC
     93  f0b6					      REPEND
     94  f0b8		       85 02		      sta	WSYNC
     93  f0b8					      REPEND
     94  f0ba		       85 02		      sta	WSYNC
     93  f0ba					      REPEND
     94  f0bc		       85 02		      sta	WSYNC
     93  f0bc					      REPEND
     94  f0be		       85 02		      sta	WSYNC
     93  f0be					      REPEND
     94  f0c0		       85 02		      sta	WSYNC
     93  f0c0					      REPEND
     94  f0c2		       85 02		      sta	WSYNC
     95  f0c4					      REPEND
     96  f0c4
     97  f0c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f0c4							;; Display 10 scanlines for player 0 graphics
     99  f0c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f0c4
    101  f0c4		       a0 00		      ldy	#0
    102  f0c6				   LOOP_PLAYER0
    103  f0c6		       b9 e8 ff 	      lda	playerBMap,Y	; get current line from number bitmap
    104  f0c9		       85 1b		      sta	GRP0	; store in playfield (draw this to screen)
    105  f0cb		       85 02		      sta	WSYNC	; wait for next scanline
    106  f0cd		       c8		      iny		; increment index
    107  f0ce		       c0 0a		      cpy	#10	; compare index to 10
    108  f0d0		       d0 f4		      bne	LOOP_PLAYER0	; loop if not 10
    109  f0d2
    110  f0d2		       a9 00		      lda	#0
    111  f0d4		       85 1b		      sta	GRP0	; clear playfield1
    112  f0d6
    113  f0d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f0d6							;; Display 10 scanlines for player 1 graphics
    115  f0d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f0d6
    117  f0d6		       a0 00		      ldy	#0
    118  f0d8				   LOOP_PLAYER1
    119  f0d8		       b9 e8 ff 	      lda	playerBMap,Y	; get current line from number bitmap
    120  f0db		       85 1c		      sta	GRP1	; store in playfield (draw this to screen)
    121  f0dd		       85 02		      sta	WSYNC	; wait for next scanline
    122  f0df		       c8		      iny		; increment index
    123  f0e0		       c0 0a		      cpy	#10	; compare index to 10
    124  f0e2		       d0 f4		      bne	LOOP_PLAYER1	; loop if not 10
    125  f0e4
    126  f0e4		       a9 00		      lda	#0
    127  f0e6		       85 1c		      sta	GRP1	; clear playfield1
    128  f0e8
    129  f0e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    130  f0e8							;; Draw the remaining 102 scanlines
    131  f0e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132  f0e8
    133  f0e8					      REPEAT	102
    134  f0e8		       85 02		      sta	WSYNC
    133  f0e8					      REPEND
    134  f0ea		       85 02		      sta	WSYNC
    133  f0ea					      REPEND
    134  f0ec		       85 02		      sta	WSYNC
    133  f0ec					      REPEND
    134  f0ee		       85 02		      sta	WSYNC
    133  f0ee					      REPEND
    134  f0f0		       85 02		      sta	WSYNC
    133  f0f0					      REPEND
    134  f0f2		       85 02		      sta	WSYNC
    133  f0f2					      REPEND
    134  f0f4		       85 02		      sta	WSYNC
    133  f0f4					      REPEND
    134  f0f6		       85 02		      sta	WSYNC
    133  f0f6					      REPEND
    134  f0f8		       85 02		      sta	WSYNC
    133  f0f8					      REPEND
    134  f0fa		       85 02		      sta	WSYNC
    133  f0fa					      REPEND
    134  f0fc		       85 02		      sta	WSYNC
    133  f0fc					      REPEND
    134  f0fe		       85 02		      sta	WSYNC
    133  f0fe					      REPEND
    134  f100		       85 02		      sta	WSYNC
    133  f100					      REPEND
    134  f102		       85 02		      sta	WSYNC
    133  f102					      REPEND
    134  f104		       85 02		      sta	WSYNC
    133  f104					      REPEND
    134  f106		       85 02		      sta	WSYNC
    133  f106					      REPEND
    134  f108		       85 02		      sta	WSYNC
    133  f108					      REPEND
    134  f10a		       85 02		      sta	WSYNC
    133  f10a					      REPEND
    134  f10c		       85 02		      sta	WSYNC
    133  f10c					      REPEND
    134  f10e		       85 02		      sta	WSYNC
    133  f10e					      REPEND
    134  f110		       85 02		      sta	WSYNC
    133  f110					      REPEND
    134  f112		       85 02		      sta	WSYNC
    133  f112					      REPEND
    134  f114		       85 02		      sta	WSYNC
    133  f114					      REPEND
    134  f116		       85 02		      sta	WSYNC
    133  f116					      REPEND
    134  f118		       85 02		      sta	WSYNC
    133  f118					      REPEND
    134  f11a		       85 02		      sta	WSYNC
    133  f11a					      REPEND
    134  f11c		       85 02		      sta	WSYNC
    133  f11c					      REPEND
    134  f11e		       85 02		      sta	WSYNC
    133  f11e					      REPEND
    134  f120		       85 02		      sta	WSYNC
    133  f120					      REPEND
    134  f122		       85 02		      sta	WSYNC
    133  f122					      REPEND
    134  f124		       85 02		      sta	WSYNC
    133  f124					      REPEND
    134  f126		       85 02		      sta	WSYNC
    133  f126					      REPEND
    134  f128		       85 02		      sta	WSYNC
    133  f128					      REPEND
    134  f12a		       85 02		      sta	WSYNC
    133  f12a					      REPEND
    134  f12c		       85 02		      sta	WSYNC
    133  f12c					      REPEND
    134  f12e		       85 02		      sta	WSYNC
    133  f12e					      REPEND
    134  f130		       85 02		      sta	WSYNC
    133  f130					      REPEND
    134  f132		       85 02		      sta	WSYNC
    133  f132					      REPEND
    134  f134		       85 02		      sta	WSYNC
    133  f134					      REPEND
    134  f136		       85 02		      sta	WSYNC
    133  f136					      REPEND
    134  f138		       85 02		      sta	WSYNC
    133  f138					      REPEND
    134  f13a		       85 02		      sta	WSYNC
    133  f13a					      REPEND
    134  f13c		       85 02		      sta	WSYNC
    133  f13c					      REPEND
    134  f13e		       85 02		      sta	WSYNC
    133  f13e					      REPEND
    134  f140		       85 02		      sta	WSYNC
    133  f140					      REPEND
    134  f142		       85 02		      sta	WSYNC
    133  f142					      REPEND
    134  f144		       85 02		      sta	WSYNC
    133  f144					      REPEND
    134  f146		       85 02		      sta	WSYNC
    133  f146					      REPEND
    134  f148		       85 02		      sta	WSYNC
    133  f148					      REPEND
    134  f14a		       85 02		      sta	WSYNC
    133  f14a					      REPEND
    134  f14c		       85 02		      sta	WSYNC
    133  f14c					      REPEND
    134  f14e		       85 02		      sta	WSYNC
    133  f14e					      REPEND
    134  f150		       85 02		      sta	WSYNC
    133  f150					      REPEND
    134  f152		       85 02		      sta	WSYNC
    133  f152					      REPEND
    134  f154		       85 02		      sta	WSYNC
    133  f154					      REPEND
    134  f156		       85 02		      sta	WSYNC
    133  f156					      REPEND
    134  f158		       85 02		      sta	WSYNC
    133  f158					      REPEND
    134  f15a		       85 02		      sta	WSYNC
    133  f15a					      REPEND
    134  f15c		       85 02		      sta	WSYNC
    133  f15c					      REPEND
    134  f15e		       85 02		      sta	WSYNC
    133  f15e					      REPEND
    134  f160		       85 02		      sta	WSYNC
    133  f160					      REPEND
    134  f162		       85 02		      sta	WSYNC
    133  f162					      REPEND
    134  f164		       85 02		      sta	WSYNC
    133  f164					      REPEND
    134  f166		       85 02		      sta	WSYNC
    133  f166					      REPEND
    134  f168		       85 02		      sta	WSYNC
    133  f168					      REPEND
    134  f16a		       85 02		      sta	WSYNC
    133  f16a					      REPEND
    134  f16c		       85 02		      sta	WSYNC
    133  f16c					      REPEND
    134  f16e		       85 02		      sta	WSYNC
    133  f16e					      REPEND
    134  f170		       85 02		      sta	WSYNC
    133  f170					      REPEND
    134  f172		       85 02		      sta	WSYNC
    133  f172					      REPEND
    134  f174		       85 02		      sta	WSYNC
    133  f174					      REPEND
    134  f176		       85 02		      sta	WSYNC
    133  f176					      REPEND
    134  f178		       85 02		      sta	WSYNC
    133  f178					      REPEND
    134  f17a		       85 02		      sta	WSYNC
    133  f17a					      REPEND
    134  f17c		       85 02		      sta	WSYNC
    133  f17c					      REPEND
    134  f17e		       85 02		      sta	WSYNC
    133  f17e					      REPEND
    134  f180		       85 02		      sta	WSYNC
    133  f180					      REPEND
    134  f182		       85 02		      sta	WSYNC
    133  f182					      REPEND
    134  f184		       85 02		      sta	WSYNC
    133  f184					      REPEND
    134  f186		       85 02		      sta	WSYNC
    133  f186					      REPEND
    134  f188		       85 02		      sta	WSYNC
    133  f188					      REPEND
    134  f18a		       85 02		      sta	WSYNC
    133  f18a					      REPEND
    134  f18c		       85 02		      sta	WSYNC
    133  f18c					      REPEND
    134  f18e		       85 02		      sta	WSYNC
    133  f18e					      REPEND
    134  f190		       85 02		      sta	WSYNC
    133  f190					      REPEND
    134  f192		       85 02		      sta	WSYNC
    133  f192					      REPEND
    134  f194		       85 02		      sta	WSYNC
    133  f194					      REPEND
    134  f196		       85 02		      sta	WSYNC
    133  f196					      REPEND
    134  f198		       85 02		      sta	WSYNC
    133  f198					      REPEND
    134  f19a		       85 02		      sta	WSYNC
    133  f19a					      REPEND
    134  f19c		       85 02		      sta	WSYNC
    133  f19c					      REPEND
    134  f19e		       85 02		      sta	WSYNC
    133  f19e					      REPEND
    134  f1a0		       85 02		      sta	WSYNC
    133  f1a0					      REPEND
    134  f1a2		       85 02		      sta	WSYNC
    133  f1a2					      REPEND
    134  f1a4		       85 02		      sta	WSYNC
    133  f1a4					      REPEND
    134  f1a6		       85 02		      sta	WSYNC
    133  f1a6					      REPEND
    134  f1a8		       85 02		      sta	WSYNC
    133  f1a8					      REPEND
    134  f1aa		       85 02		      sta	WSYNC
    133  f1aa					      REPEND
    134  f1ac		       85 02		      sta	WSYNC
    133  f1ac					      REPEND
    134  f1ae		       85 02		      sta	WSYNC
    133  f1ae					      REPEND
    134  f1b0		       85 02		      sta	WSYNC
    133  f1b0					      REPEND
    134  f1b2		       85 02		      sta	WSYNC
    135  f1b4					      REPEND
    136  f1b4
    137  f1b4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    138  f1b4							;; output 30 more VBLANK LINES (overscan) to complete our frame
    139  f1b4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    140  f1b4		       a9 02		      lda	#%00000010	; load binary 2
    141  f1b6		       85 01		      sta	VBLANK	; enable VBLANK
    142  f1b8
    143  f1b8		       a2 1e		      ldx	#30	; load decimal 30, overscan count
    144  f1ba				   LOOP_OVERSCAN
    145  f1ba		       85 02		      sta	WSYNC
    146  f1bc		       ca		      dex
    147  f1bd		       d0 fb		      bne	LOOP_OVERSCAN
    148  f1bf		       86 01		      stx	VBLANK	; turn off vblank
    149  f1c1
    150  f1c1		       4c 1f f0 	      jmp	NEW_FRAME	; restart loop
    151  f1c4
    152  f1c4
    153  f1c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    154  f1c4							;; -------------------------DATA------------------------------------
    155  f1c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  ffe8					      org	$FFE8
    157  ffe8				   playerBMap
    158  ffe8		       7e		      .byte.b	#%01111110	; -######-
    159  ffe9		       ff		      .byte.b	#%11111111	; ########
    160  ffea		       99		      .byte.b	#%10011001	; #--##--#
    161  ffeb		       ff		      .byte.b	#%11111111	; ########
    162  ffec		       ff		      .byte.b	#%11111111	; ########
    163  ffed		       ff		      .byte.b	#%11111111	; ########
    164  ffee		       bd		      .byte.b	#%10111101	; #-####-#
    165  ffef		       c3		      .byte.b	#%11000011	; ##----##
    166  fff0		       ff		      .byte.b	#%11111111	; ########
    167  fff1		       7e		      .byte.b	#%01111110	; -######-
    168  fff2
    169  fff2					      org	$FFF2
    170  fff2				   numBitmap
    171  fff2		       0e		      .byte.b	#%00001110	; ----###-
    172  fff3		       0e		      .byte.b	#%00001110	; ----###-
    173  fff4		       02		      .byte.b	#%00000010	; ------#-
    174  fff5		       02		      .byte.b	#%00000010	; ------#-
    175  fff6		       0e		      .byte.b	#%00001110	; ----###-
    176  fff7		       0e		      .byte.b	#%00001110	; ----###-
    177  fff8		       08		      .byte.b	#%00001000	; ----#---
    178  fff9		       08		      .byte.b	#%00001000	; ----#---
    179  fffa		       0e		      .byte.b	#%00001110	; ----###-
    180  fffb		       0e		      .byte.b	#%00001110	; ----###-
    181  fffc
    182  fffc
    183  fffc
    184  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    185  fffc							;; Pack Rom (reset and interrupt vector)
    186  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    187  fffc					      org	$FFFC
    188  fffc		       00 f0		      .word.w	START
    189  fffe		       00 f0		      .word.w	START
